#include <stdio.h>
#include <algorithm>
#include <queue>
#pragma warning (disable:4996)
#define NM 105
#define FOR(i,n,m) for (int i=(n);i<=(m);i++)
typedef long long int ll;
FILE *in,*out;

int M, N;
char pat[NM][NM], text[NM];

/*** Aho-Corasick data structure ***/
int acN;                // # of nodes
struct AC{
    int id;
    AC* next[26];
    AC* fail;
    AC(){
        id = -1;
        FOR (i,0,25) next[i] = nullptr;
        fail = nullptr;
    }
}ac[NM*NM];
/***********************************/

/// Input function
void input() {
    fscanf(in, "%d %d\n", &M, &N);
    FOR(i, 1, M) fscanf(in, "%s", &pat[i][1]);
    fscanf(in, "%s", &text[1]);
}

/// Assign number for each line with considering uniqueness
void buildingPatternsTrie(){
    acN = 0;
    FOR (i,1,M){
        AC* cur = &ac[0];
        FOR (j,1,M){
            if (cur->next[pat[i][j]-'a'] == nullptr)
                cur->next[pat[i][j]-'a'] = &ac[++acN];
            cur = cur->next[pat[i][j]-'a'];
        }
        if (cur->id == -1) cur->id = i, uniqueRowFlag[i] = 1;
        patLinear[i] = cur->id;
    }
}

/// Construct Aho-Corasick
void constructACs(){
    std::queue<AC*> Q;
    Q.push(&ac[0]);
    while (!Q.empty()){
        AC* node = Q.front(); Q.pop();
        // Find failure link for its children
        FOR (j,0,25){
            AC* child = node->next[j];
            if (child == nullptr) continue;

            Q.push(child);

            AC* cur = node;
            for (;;){
                cur = cur->fail;
                if (cur == nullptr){
                    child->fail = &ac[0];
                    break;
                }
                if (cur->next[j] != nullptr){
                    child->fail = cur->next[j];
                    break;
                }
            }
        }
    }
}

/// Processing Baker-Bird Algorithm
void Aho_Corasick(){
    /*** Preprocess ***/

    // assign number for each line with considering uniqueness
    numberingRow();

    // construct Aho-Corasick
    constructACs();

    /******************/

    /*** Baker Bird Algorithm ***/

    // setup each column's kmp pointers
    FOR (j,1,N) kmpPointer[j]=0;


    // searching pattern in text
    AC* cur = &ac[0];
    FOR (i,1,N){

        while (cur->next[text[i]-'a'] == nullptr){
            if (cur->fail == nullptr) break;
            cur = cur->fail;
        }
        if (cur->next[text[i]-'a'] != nullptr){
            cur = cur->next[text[i]-'a'];
        }
        int matchingIdx = 0;
        if (cur->id != -1) matchingIdx = cur->id;
    }

    /****************************/
}

int main(int argc, char* argv[]){
    if (argc>=3){
        in = fopen(argv[1],"r");
        out = fopen(argv[2],"w");
    }else{
        in = stdin;
        out = stdout;
    }
    input();
    Aho_Corasick();
    return 0;
}
