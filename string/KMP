bool kmp_search(std::vector<int> S, std::vector<int> W, std::vector<int> T) { // search W in S
    int m = 0, i = 0, len_s = S.size(), len_w = W.size();
    T[0] = -1;
 
    while (m + i<len_s) {
        if (W[i] == S[m + i]) {
            if (i == len_w - 1)
                return true;
            i++;
        }
        else {
            if (T[i]>-1)
                m = m + i - T[i], i = T[i];
            else
                i = 0, m++;
        }
    }
    return false;
}
 
std::vector<int> kmp_table(std::vector<int> W, std::vector<int> T) {
    int pos = 2, cnd = 0, len_w = W.size();
    T.resize(len_w);
    T[0] = -1, T[1] = 0;
    while (pos < len_w) {
        if (W[pos - 1] == W[cnd])
            T[pos] = cnd + 1, cnd = cnd + 1, pos = pos + 1;
        else if (cnd>0)
            cnd = T[cnd];
        else
            T[pos] = 0, pos++;
    }
    return T;
}
 
