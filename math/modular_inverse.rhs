// reference : https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/

// Iterative C++ program to find modular 
// inverse using extended Euclid algorithm 
#include <stdio.h> 
  
// Returns modulo inverse of a with respect 
// to m using extended Euclid Algorithm 
// Assumption: a and m are coprimes, i.e., 
// gcd(a, m) = 1 
typedef int modInvT;
modInvT modInverse(modInvT a, modInvT m) 
{ 
    modInvT m0 = m; 
    modInvT y = 0, x = 1; 
  
    if (m == 1) 
      return 0; 
  
    while (a > 1) 
    { 
        // q is quotient 
        modInvT q = a / m; 
        modInvT t = m; 
  
        // m is remainder now, process same as 
        // Euclid's algo 
        m = a % m, a = t; 
        t = y; 
  
        // Update y and x 
        y = x - q * y; 
        x = t; 
    } 
  
    // Make x positive 
    if (x < 0) 
       x += m0; 
  
    return x; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int a = 3, m = 11; 
  
    printf("Modular multiplicative inverse is %d\n", 
          modInverse(a, m)); 
    return 0; 
}
