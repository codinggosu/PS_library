using namespace std;
#include <vector>
#include <queue>
#include <limits>
template <class cap_t, class cost_t>
struct MCMF {
private:
    struct Edge {
        int v;
        cost_t cost;
        cap_t resCap, limCap;

        Edge() { v = cost = resCap = limCap = 0; }

        Edge(int v, cost_t cost, cap_t resCap, cap_t limCap) :v(v), cost(cost), resCap(resCap), limCap(limCap) {}
    };

    int n, source, sink;
    cost_t DEF;
    vector<cost_t> dis;
    vector<pair<int, int> > backtrack;
    vector<bool> inQ;
    vector<Edge> edges;
    vector<vector<int> > graph;
    queue<int> que, relaxCount;

    // TODO: handling negative cycle
    // TODO: johnson's potential
    void spfa() {
        FOR(i, 1, n) dis[i] = DEF, backtrack[i] = { -1, 0 };
        dis[source] = 0;
        fill(inQ.begin(), inQ.end(), false);
        que.push(source);
        while (!que.empty()) {
            int cur = que.front();
            que.pop();
            inQ[cur] = false;
            for (int idx : graph[cur]) {
                Edge& e = edges[idx];
                if (e.resCap == 0) continue;
                if (dis[e.v] > dis[cur] + e.cost) {
                    dis[e.v] = dis[cur] + e.cost;
                    backtrack[e.v] = { cur, idx };
                    if (inQ[e.v]) continue;
                    que.push(e.v);
                    inQ[e.v] = true;
                }
            }
        }
    }

    pair<cost_t, cap_t> augmentShortest(cap_t flowLimit) {
        spfa();
        if (backtrack[sink].first == -1) return { 0,0 };
        cap_t flow = flowLimit;
        int x = sink;
        while (x != source) {
            int eIdx = backtrack[x].second;
            flow = min(flow, edges[eIdx].resCap);
            x = backtrack[x].first;
        }
        x = sink;
        while (x != source) {
            int eIdx = backtrack[x].second;
            edges[eIdx].resCap -= flow;
            edges[eIdx ^ 1].resCap += flow;
            x = backtrack[x].first;
        }
        return { dis[sink], flow };
    }

public:
    MCMF() : n(0), DEF(0) {
        dis.clear();
        graph.clear();
        inQ.clear();
        backtrack.clear();
        edges.clear();
    };

    MCMF(int n, int source, int sink) : n(n), source(source), sink(sink) {
        DEF = numeric_limits<cost_t>::max();
        dis.resize(n + 1);
        backtrack.resize(n + 1);
        graph.resize(n + 1);
        inQ.resize(n + 1);
        edges.clear();
        FOR(i, 1, n) graph[i].clear();

    }

    void addEdge(int x, int y, cost_t cost, cap_t cap) {
        graph[x].push_back(edges.size());
        edges.push_back(Edge(y, cost, cap, cap));

        graph[y].push_back(edges.size());
        edges.push_back(Edge(x, -cost, 0, 0));
    }

    pair<cost_t, cap_t> solve(cap_t flowLimit = numeric_limits<cap_t>::max()) {
        cost_t totalCost = 0;
        cap_t totalFlow = 0;
        while (flowLimit != 0) {
            auto res = augmentShortest(flowLimit);
            if (res.second == 0) break;
            totalCost += res.first;
            totalFlow += res.second;
            flowLimit -= res.second;
        }
        return { totalCost, totalFlow };
    }
};
